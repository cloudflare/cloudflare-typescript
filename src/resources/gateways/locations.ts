// File generated from our OpenAPI spec by Stainless.

import * as Core from 'cloudflare/core';
import { APIResource } from 'cloudflare/resource';
import * as LocationsAPI from 'cloudflare/resources/gateways/locations';

export class Locations extends APIResource {
  /**
   * Creates a new Zero Trust Gateway location.
   */
  create(
    accountId: unknown,
    body: LocationCreateParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<LocationCreateResponse> {
    return (
      this._client.post(`/accounts/${accountId}/gateway/locations`, { body, ...options }) as Core.APIPromise<{
        result: LocationCreateResponse;
      }>
    )._thenUnwrap((obj) => obj.result);
  }

  /**
   * Fetches Zero Trust Gateway locations for an account.
   */
  list(accountId: unknown, options?: Core.RequestOptions): Core.APIPromise<LocationListResponse | null> {
    return (
      this._client.get(`/accounts/${accountId}/gateway/locations`, options) as Core.APIPromise<{
        result: LocationListResponse | null;
      }>
    )._thenUnwrap((obj) => obj.result);
  }

  /**
   * Deletes a configured Zero Trust Gateway location.
   */
  delete(
    accountId: unknown,
    locationId: unknown,
    options?: Core.RequestOptions,
  ): Core.APIPromise<LocationDeleteResponse> {
    return (
      this._client.delete(
        `/accounts/${accountId}/gateway/locations/${locationId}`,
        options,
      ) as Core.APIPromise<{ result: LocationDeleteResponse }>
    )._thenUnwrap((obj) => obj.result);
  }

  /**
   * Fetches a single Zero Trust Gateway location.
   */
  get(
    accountId: unknown,
    locationId: unknown,
    options?: Core.RequestOptions,
  ): Core.APIPromise<LocationGetResponse> {
    return (
      this._client.get(`/accounts/${accountId}/gateway/locations/${locationId}`, options) as Core.APIPromise<{
        result: LocationGetResponse;
      }>
    )._thenUnwrap((obj) => obj.result);
  }

  /**
   * Updates a configured Zero Trust Gateway location.
   */
  replace(
    accountId: unknown,
    locationId: unknown,
    body: LocationReplaceParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<LocationReplaceResponse> {
    return (
      this._client.put(`/accounts/${accountId}/gateway/locations/${locationId}`, {
        body,
        ...options,
      }) as Core.APIPromise<{ result: LocationReplaceResponse }>
    )._thenUnwrap((obj) => obj.result);
  }
}

export interface LocationCreateResponse {
  id?: unknown;

  /**
   * True if the location is the default location.
   */
  client_default?: boolean;

  created_at?: string;

  /**
   * The DNS over HTTPS domain to send DNS requests to. This field is auto-generated
   * by Gateway.
   */
  doh_subdomain?: string;

  /**
   * True if the location needs to resolve EDNS queries.
   */
  ecs_support?: boolean;

  /**
   * IPV6 destination ip assigned to this location. DNS requests sent to this IP will
   * counted as the request under this location. This field is auto-generated by
   * Gateway.
   */
  ip?: string;

  /**
   * The name of the location.
   */
  name?: string;

  /**
   * A list of network ranges that requests from this location would originate from.
   */
  networks?: Array<LocationCreateResponse.Network>;

  updated_at?: string;
}

export namespace LocationCreateResponse {
  export interface Network {
    /**
     * The IPv4 address or IPv4 CIDR. IPv4 CIDRs are limited to a maximum of /24.
     */
    network: string;
  }
}

export type LocationListResponse = Array<LocationListResponse.LocationListResponseItem>;

export namespace LocationListResponse {
  export interface LocationListResponseItem {
    id?: unknown;

    /**
     * True if the location is the default location.
     */
    client_default?: boolean;

    created_at?: string;

    /**
     * The DNS over HTTPS domain to send DNS requests to. This field is auto-generated
     * by Gateway.
     */
    doh_subdomain?: string;

    /**
     * True if the location needs to resolve EDNS queries.
     */
    ecs_support?: boolean;

    /**
     * IPV6 destination ip assigned to this location. DNS requests sent to this IP will
     * counted as the request under this location. This field is auto-generated by
     * Gateway.
     */
    ip?: string;

    /**
     * The name of the location.
     */
    name?: string;

    /**
     * A list of network ranges that requests from this location would originate from.
     */
    networks?: Array<LocationListResponseItem.Network>;

    updated_at?: string;
  }

  export namespace LocationListResponseItem {
    export interface Network {
      /**
       * The IPv4 address or IPv4 CIDR. IPv4 CIDRs are limited to a maximum of /24.
       */
      network: string;
    }
  }
}

export type LocationDeleteResponse = unknown | string;

export interface LocationGetResponse {
  id?: unknown;

  /**
   * True if the location is the default location.
   */
  client_default?: boolean;

  created_at?: string;

  /**
   * The DNS over HTTPS domain to send DNS requests to. This field is auto-generated
   * by Gateway.
   */
  doh_subdomain?: string;

  /**
   * True if the location needs to resolve EDNS queries.
   */
  ecs_support?: boolean;

  /**
   * IPV6 destination ip assigned to this location. DNS requests sent to this IP will
   * counted as the request under this location. This field is auto-generated by
   * Gateway.
   */
  ip?: string;

  /**
   * The name of the location.
   */
  name?: string;

  /**
   * A list of network ranges that requests from this location would originate from.
   */
  networks?: Array<LocationGetResponse.Network>;

  updated_at?: string;
}

export namespace LocationGetResponse {
  export interface Network {
    /**
     * The IPv4 address or IPv4 CIDR. IPv4 CIDRs are limited to a maximum of /24.
     */
    network: string;
  }
}

export interface LocationReplaceResponse {
  id?: unknown;

  /**
   * True if the location is the default location.
   */
  client_default?: boolean;

  created_at?: string;

  /**
   * The DNS over HTTPS domain to send DNS requests to. This field is auto-generated
   * by Gateway.
   */
  doh_subdomain?: string;

  /**
   * True if the location needs to resolve EDNS queries.
   */
  ecs_support?: boolean;

  /**
   * IPV6 destination ip assigned to this location. DNS requests sent to this IP will
   * counted as the request under this location. This field is auto-generated by
   * Gateway.
   */
  ip?: string;

  /**
   * The name of the location.
   */
  name?: string;

  /**
   * A list of network ranges that requests from this location would originate from.
   */
  networks?: Array<LocationReplaceResponse.Network>;

  updated_at?: string;
}

export namespace LocationReplaceResponse {
  export interface Network {
    /**
     * The IPv4 address or IPv4 CIDR. IPv4 CIDRs are limited to a maximum of /24.
     */
    network: string;
  }
}

export interface LocationCreateParams {
  /**
   * The name of the location.
   */
  name: string;

  /**
   * True if the location is the default location.
   */
  client_default?: boolean;

  /**
   * True if the location needs to resolve EDNS queries.
   */
  ecs_support?: boolean;

  /**
   * A list of network ranges that requests from this location would originate from.
   */
  networks?: Array<LocationCreateParams.Network>;
}

export namespace LocationCreateParams {
  export interface Network {
    /**
     * The IPv4 address or IPv4 CIDR. IPv4 CIDRs are limited to a maximum of /24.
     */
    network: string;
  }
}

export interface LocationReplaceParams {
  /**
   * The name of the location.
   */
  name: string;

  /**
   * True if the location is the default location.
   */
  client_default?: boolean;

  /**
   * True if the location needs to resolve EDNS queries.
   */
  ecs_support?: boolean;

  /**
   * A list of network ranges that requests from this location would originate from.
   */
  networks?: Array<LocationReplaceParams.Network>;
}

export namespace LocationReplaceParams {
  export interface Network {
    /**
     * The IPv4 address or IPv4 CIDR. IPv4 CIDRs are limited to a maximum of /24.
     */
    network: string;
  }
}

export namespace Locations {
  export import LocationCreateResponse = LocationsAPI.LocationCreateResponse;
  export import LocationListResponse = LocationsAPI.LocationListResponse;
  export import LocationDeleteResponse = LocationsAPI.LocationDeleteResponse;
  export import LocationGetResponse = LocationsAPI.LocationGetResponse;
  export import LocationReplaceResponse = LocationsAPI.LocationReplaceResponse;
  export import LocationCreateParams = LocationsAPI.LocationCreateParams;
  export import LocationReplaceParams = LocationsAPI.LocationReplaceParams;
}
