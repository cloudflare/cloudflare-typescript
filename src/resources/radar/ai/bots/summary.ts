// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../../../resource';
import { isRequestOptions } from '../../../../core';
import * as Core from '../../../../core';
import * as SummaryAPI from './summary';

export class Summary extends APIResource {
  /**
   * Percentage of Internet traffic generated by AI user agents, over a given time
   * period.
   */
  userAgent(
    query?: SummaryUserAgentParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<SummaryUserAgentResponse>;
  userAgent(options?: Core.RequestOptions): Core.APIPromise<SummaryUserAgentResponse>;
  userAgent(
    query: SummaryUserAgentParams | Core.RequestOptions = {},
    options?: Core.RequestOptions,
  ): Core.APIPromise<SummaryUserAgentResponse> {
    if (isRequestOptions(query)) {
      return this.userAgent({}, query);
    }
    return (
      this._client.get('/radar/ai/bots/summary/user_agent', { query, ...options }) as Core.APIPromise<{
        result: SummaryUserAgentResponse;
      }>
    )._thenUnwrap((obj) => obj.result);
  }
}

export interface SummaryUserAgentResponse {
  meta: SummaryUserAgentResponse.Meta;

  summary_0: Record<string, Array<string>>;
}

export namespace SummaryUserAgentResponse {
  export interface Meta {
    dateRange: Array<Meta.DateRange>;

    lastUpdated: string;

    normalization: string;

    confidenceInfo?: Meta.ConfidenceInfo;
  }

  export namespace Meta {
    export interface DateRange {
      /**
       * Adjusted end of date range.
       */
      endTime: string;

      /**
       * Adjusted start of date range.
       */
      startTime: string;
    }

    export interface ConfidenceInfo {
      annotations?: Array<ConfidenceInfo.Annotation>;

      level?: number;
    }

    export namespace ConfidenceInfo {
      export interface Annotation {
        dataSource: string;

        description: string;

        eventType: string;

        isInstantaneous: boolean;

        endTime?: string;

        linkedUrl?: string;

        startTime?: string;
      }
    }
  }
}

export interface SummaryUserAgentParams {
  /**
   * Array of comma separated list of ASNs, start with `-` to exclude from results.
   * For example, `-174, 3356` excludes results from AS174, but includes results from
   * AS3356.
   */
  asn?: Array<string>;

  /**
   * Array of comma separated list of continents (alpha-2 continent codes). Start
   * with `-` to exclude from results. For example, `-EU,NA` excludes results from
   * Europe, but includes results from North America.
   */
  continent?: Array<string>;

  /**
   * End of the date range (inclusive).
   */
  dateEnd?: Array<string>;

  /**
   * For example, use `7d` and `7dControl` to compare this week with the previous
   * week. Use this parameter or set specific start and end dates (`dateStart` and
   * `dateEnd` parameters).
   */
  dateRange?: Array<string>;

  /**
   * Array of datetimes to filter the start of a series.
   */
  dateStart?: Array<string>;

  /**
   * Format results are returned in.
   */
  format?: 'JSON' | 'CSV';

  /**
   * Array of comma separated list of locations (alpha-2 country codes). Start with
   * `-` to exclude from results. For example, `-US,PT` excludes results from the US,
   * but includes results from PT.
   */
  location?: Array<string>;

  /**
   * Array of names that will be used to name the series in responses.
   */
  name?: Array<string>;
}

export namespace Summary {
  export import SummaryUserAgentResponse = SummaryAPI.SummaryUserAgentResponse;
  export import SummaryUserAgentParams = SummaryAPI.SummaryUserAgentParams;
}
